// package main

// import (
// 	"math/rand"
// )

// // func climbingLeaderboard(scores []int32, alice []int32) []int32 {

// // 	ranks := []int32{}
// // 	scoreRanks := []int32{}
// // 	if len(scores) == 0 {
// // 		return ranks
// // 	}

// // 	scoreRanks = append(scoreRanks, int32(1))
// // 	if len(scores) > 1 {
// // 		for j := 1; j < len(scores); j++ {
// // 			if scores[j] == scores[j-1] {
// // 				scoreRanks = append(scoreRanks, scoreRanks[j-1])
// // 			}
// // 			if scores[j] < scores[j-1] {
// // 				scoreRanks = append(scoreRanks, scoreRanks[j-1]+1)
// // 			}
// // 		}
// // 	}
// // 	i := 0
// // 	for _, aliceScore := range alice {

// // 		i = 0
// // 		for i < len(scores) && scores[i] > aliceScore && scores[i] != aliceScore {
// // 			i++
// // 		}

// // 		if i >= len(scores) {
// // 			ranks = append(ranks, scoreRanks[i-1]+1)
// // 		}

// // 		if i < len(scores) {
// // 			ranks = append(ranks, scoreRanks[i])
// // 		}

// // 	}

// // 	return ranks

// // }

// func climbingLeaderboard(scores []int32, alice []int32) []int32 {

// 	ranks := []int32{}
// 	if len(scores) == 0 || len(alice) == 0 {
// 		return ranks
// 	}

// 	indexScore := 0
// 	aliceIndexScore := len(alice) - 1
// 	rank := int32(1)
// 	passedValue := int32(scores[0])
// 	for indexScore < len(scores) && aliceIndexScore >= 0 {

// 		if alice[aliceIndexScore] == scores[indexScore] {
// 			ranks = append(ranks, rank)
// 			aliceIndexScore--
// 			continue
// 		}
// 		if alice[aliceIndexScore] > scores[indexScore] {
// 			ranks = append(ranks, rank)
// 			aliceIndexScore--
// 			continue
// 		}
// 		if alice[aliceIndexScore] < scores[indexScore] {
// 			passedValue = scores[indexScore]
// 			indexScore++
// 			if indexScore < len(scores) {
// 				rank = getNewRank(rank, passedValue, scores[indexScore])
// 			}

// 			if indexScore >= len(scores) {
// 				rank++
// 			}

// 			continue
// 		}

// 	}

// 	for aliceIndexScore >= 0 {
// 		ranks = append(ranks, rank)
// 		aliceIndexScore--
// 	}

// 	reverseRanks := []int32{}
// 	for i := len(ranks) - 1; i >= 0; i-- {
// 		reverseRanks = append(reverseRanks, ranks[i])
// 	}

// 	return reverseRanks

// }

// func getNewRank(rank int32, oldValue int32, newValue int32) int32 {
// 	if oldValue == newValue {
// 		return rank
// 	}
// 	return (rank + 1)

// }

// func main() {

// 	// scores := []int32{99999291, 99999252, 99999170, 99998537, 99998535, 99998386, 99998178, 99998168, 99997705, 99997602, 99997179, 99995830, 99995696, 99994263, 99993436, 99993240, 99993016, 99991535, 99991014, 99989878, 99989562, 99988069, 99988050, 99987578, 99987198, 99985818, 99985353, 99985299, 99984538, 99984018, 99983901, 99983362, 99982558, 99981719, 99981681, 99981137, 99980741, 99980586, 99980581, 99980420, 99980412, 99979665, 99978892, 99977963, 99977673, 99977505, 99976283, 99976228, 99976058, 99975577, 99974437, 99973903, 99973671, 99973484, 99973152, 99970400, 99969479, 99969237, 99968968, 99967707, 99967612, 99967609, 99967539, 99965934, 99965326, 99965134, 99964104, 99964081, 99963645, 99963315, 99963295, 99961654, 99958185, 99958164, 99957634, 99956711, 99956624, 99956251, 99955868, 99955104, 99955101, 99954943, 99954860, 99953930, 99953922, 99953859, 99953841, 99953285, 99952738, 99952430, 99952063, 99951684, 99951644, 99951300, 99950760, 99950189, 99948034, 99947946, 99947291, 99946826, 99946177, 99945678, 99945645, 99945560, 99944926, 99944795, 99944278, 99943095, 99943030, 99942365, 99942037, 99939716}
// 	// alice := []int32{463, 98491754, 98501097, 98503326, 98504014, 98507121, 98508144, 98508922, 98513700, 98516172, 98518230, 98529872, 98530716, 98534225, 98537638, 98539314, 98541265, 98548201, 98552876, 98558885, 98569099, 98576945, 98579437, 98587255, 98590017, 98590801, 98591688, 98595555, 98597664, 98598058, 98598087, 98601699, 98604819, 98609144, 98613726, 98615957, 98625160, 98631934, 98638473, 98642491, 98651166, 98658102, 98662696, 98666504, 98667228, 98670463, 98675384, 98687095, 98687702, 98688222, 98692461, 98698628, 98699211, 98701449, 98704812, 98706521, 98713426, 98715367, 98716105, 98723881, 98724155, 98726109, 98726812, 98726993, 98733648, 98733879, 98735175, 98735587, 98735690, 98737169, 98740159, 98746052, 98753555, 98761250, 98761843, 98762944, 98766612, 98768472, 98770389, 98771827, 98776685, 98779941, 98784165, 98791627, 98800777, 98801460, 98802550, 98803312, 98804570, 98806299, 98807945, 98812648, 98816869, 98818877, 98825133, 98829689, 98831911, 98832436, 98832762, 98834222, 98841420, 98843067, 98848839, 98849041, 98855015, 98862171, 98863427, 98865762, 98866419, 98872486, 98872522, 98875524, 98875974, 98879298, 98879833, 98880686, 98884027, 98886482, 98887047, 98893123, 98898331, 98903597, 98912343, 98912698, 98915377, 98917354, 98918080, 98924696, 98924861, 98928696, 98931282, 98932158, 98935565, 98937315, 98937956, 98944957, 98945931, 98948060, 98948289, 98948941, 98952466, 98952871, 98973142, 98974005, 98976584, 98979036, 98979065, 98980424, 98982817, 98982989, 98986027, 98989009, 98989691, 98994514, 98995958, 98998270, 99000546, 99000891, 99002085, 99002491, 99002593, 99010200, 99011515, 99015401, 99019706, 99020369, 99022383, 99022620, 99033553, 99035941, 99035976, 99041845, 99043133, 99047731, 99053358, 99055716, 99062422, 99065224, 99071452, 99076113, 99080785, 99082164, 99083641, 99085150, 99090677, 99096804, 99098376, 99104005, 99111518, 99112215, 99116235, 99124378, 99129089, 99130498, 99137548, 99141075, 99141909, 99142918, 99147602, 99151942, 99158402, 99166036, 99166042, 99168074, 99177958, 99181774, 99183205, 99191934, 99194123, 99195025, 99200654, 99202496, 99207539, 99208854, 99211878, 99212390, 99212723, 99216880, 99218522, 99220374, 99220813, 99227463, 99228659, 99229501, 99234220, 99238875, 99239319, 99240868, 99241159, 99245249, 99246462, 99247370, 99253530, 99260795, 99270061, 99272219, 99274324, 99279181, 99280228, 99282534, 99285262, 99286991, 99289274, 99297971, 99308567, 99310329, 99310556, 99311413, 99313152, 99315013, 99320015, 99321970, 99322005, 99327744, 99329051, 99329725, 99338773, 99340195, 99342391, 99342742, 99343179, 99344850, 99352664, 99358482, 99358736, 99369095, 99370192, 99370587, 99372581, 99376672, 99377227, 99378195, 99380526, 99384445, 99384502, 99387359, 99389064, 99397128, 99398599, 99409397, 99410750, 99410917, 99414678, 99418593, 99420494, 99430986, 99431813, 99437041, 99440462, 99442470, 99446036, 99450952, 99452272, 99455678, 99458552, 99460456, 99463724, 99464699, 99469107, 99473431, 99479906, 99480584, 99481704, 99482145, 99486625, 99490401, 99493469, 99494638, 99495267, 99495547, 99496851, 99501153, 99502264, 99504065, 99514566, 99514949, 99518203, 99522313, 99526107, 99530440, 99531687, 99536606, 99537575, 99541210, 99542052, 99544177, 99548301, 99549223, 99555255, 99557092, 99562785, 99565710, 99567394, 99569098, 99571310, 99577342, 99579124, 99584452, 99586147, 99586357, 99586518, 99589351, 99590154, 99590881, 99595342, 99595663, 99598322, 99600538, 99605054, 99606481, 99611606, 99612491, 99614100, 99614536, 99615544, 99616296, 99617978, 99619221, 99623778, 99629176, 99635006, 99635764, 99636384, 99641065, 99643085, 99643248, 99645353, 99649875, 99652130, 99656969, 99657716, 99661414, 99662769, 99668363, 99673556, 99676350, 99677728, 99681598, 99693174, 99697238, 99701235, 99701403, 99706479, 99709295, 99710998, 99711452, 99711889, 99721298, 99721577, 99723582, 99728352, 99729583, 99731594, 99734564, 99736328, 99746650, 99754430, 99755040, 99757935, 99758548, 99761852, 99765067, 99765188, 99766732, 99770867, 99773451, 99780460, 99781339, 99789439, 99791303, 99801116, 99803466, 99807763, 99811364, 99814181, 99817952, 99825397, 99830070, 99832936, 99834777, 99838804, 99847979, 99848799, 99849098, 99859390, 99864430, 99869538, 99869677, 99871443, 99879004, 99879334, 99881645, 99890901, 99895052, 99897683, 99897886, 99899025, 99905337, 99917633, 99920732, 99925675, 99927086, 99930861, 99931686, 99935542, 99938014, 99939356, 99939747, 99946459, 99947040, 99947234, 99948169, 99967805, 99968573, 99969856, 99972328, 99972727, 99976853, 99977001, 99979339, 99980102, 99984962, 99987662, 99988949, 99994054, 99995561, 99996249}

// 	scores := []int32{}
// 	alice := []int32{}
// 	resultValue := int32(99999291)
// 	tempValue := int32(0)
// 	for i := 0; i < 2000; i++ {
// 		tempValue = int32(rand.Intn(100))
// 		resultValue = resultValue - tempValue
// 		scores = append(scores, resultValue)
// 	}

// 	for i := 0; i < 100000; i++ {
// 		tempValue = int32(rand.Intn(10))
// 		resultValue = resultValue + tempValue
// 		alice = append(alice, resultValue)
// 	}
// 	climbingLeaderboard(scores, alice)

// }
